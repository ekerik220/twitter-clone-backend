scalar EmailAddress
scalar Timestamp
scalar Date

extend type Query {
  """
  Gets the currently logged in user
  """
  self: User!

  users: [User]!
  """
  Checks if a user exists with given email.
  """
  emailTaken(email: String!): Boolean!

  """
  Checks if a user with given username exists.
  """
  usernameTaken(username: String!): Boolean!

  """
  Returns three random user's to be used for follow suggestions
  """
  whoToFollow: [User]!

  """
  Returns all user's with the given substring somewhere in their username
  or handle.
  """
  searchUsers(term: String!): [User]!

  """
  Get user by their handle.
  """
  getUserByHandle(handle: String!): User!
}

extend type Mutation {
  setAvatarImage(file: Upload!): User!
  followOrUnfollow(id: ID!): User!
  addOrRemoveBookmark(tweetID: ID!): User!
  updateProfile(
    username: String!
    bio: String
    avatar: Upload
    profileImg: Upload
  ): User!
}

type User @entity {
  id: ID @id
  _id: ID
  email: EmailAddress! @column
  username: String! @column
  birthdate: Date! @column
  password: String! @column
  avatar: String @column
  handle: String! @column
  tweetIDs: [String]! @column
  retweetIDs: [ID]! @column
  retweetParentIDs: [ID]! @column
  mentionIDs: [ID]! @column
  followingIDs: [ID]! @column
  followedByIDs: [ID]! @column
  bookmarkIDs: [ID]! @column
  notifications: [Notification]! @column
  listIDs: [ID]! @column
  likedTweetIDs: [ID]! @column
  bio: String @column
  profileImg: String @column
  joinDate: Date
  """
  Gets all the tweets in user's tweet list
  """
  tweets: [Tweet]

  """
  Gets all the user's bookmarked tweets
  """
  bookmarks: [Tweet]

  """
  Gets all the tweets the user was mentioned in
  """
  mentions: [Tweet]

  """
  Gets all the lists the user has
  """
  lists: [List]

  """
  Gets all the user's liked tweets
  """
  likedTweets: [Tweet]
}

type UnconfirmedUser @entity {
  id: ID @id
  email: EmailAddress! @column
  username: String! @column
  birthdate: Date! @column
  confirmed: Boolean! @column
  confirmationCode: String! @column
  timestamp: Timestamp! @column
}

type UploadFileResponse {
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type Notification {
  type: String!
  user: User!
  tweet: Tweet
  notifierID: ID!
}
